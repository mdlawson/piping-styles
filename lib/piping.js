// Generated by CoffeeScript 1.6.2
(function() {
  var chokidar, cleanCSS, colors, fs, options, path;

  path = require("path");

  fs = require("fs");

  colors = require("colors");

  chokidar = require("chokidar");

  cleanCSS = require("clean-css");

  options = {
    ignore: /(\/\.|~$)/,
    watch: true,
    minify: false,
    build: {
      ".styl": function(file, code, fn) {
        var e, s, stylus;

        try {
          stylus = require("stylus");
          s = stylus(code).set("filename", file);
          try {
            s.use(require("nib")());
          } catch (_error) {
            e = _error;
          }
          return s.render(function(err, css) {
            if (err) {
              return console.log("[piping-styles]".bold.magenta, "Error compiling", path.relative(process.cwd(), file), err);
            } else {
              return fn(css);
            }
          });
        } catch (_error) {
          e = _error;
          return console.log("[piping-styles]".bold.magenta, "Stylus module not found, can't build stylus files");
        }
      }
    }
  };

  module.exports = function(ops, out) {
    var basedir, build, file, files, key, main, value, vendor, vendorBuild, watcher, _i, _len, _ref, _ref1;

    if ((typeof ops === "string" || ops instanceof String) && (typeof out === "string" || out instanceof String)) {
      options.main = ops;
      options.out = out;
    } else {
      for (key in ops) {
        value = ops[key];
        if (key !== "build") {
          options[key] = value;
        }
      }
      if (ops.build) {
        _ref = ops.build;
        for (key in _ref) {
          value = _ref[key];
          options.build[key] = value;
        }
      }
    }
    basedir = path.dirname(module.parent.filename);
    main = path.resolve(basedir, options.main);
    out = path.resolve(basedir, options.out);
    watcher = chokidar.watch(path.dirname(main), {
      ignored: options.ignore,
      ignoreInitial: true,
      persistent: true
    });
    build = function(i, o) {
      var code, start, type;

      type = path.extname(i);
      if (options.build[type]) {
        start = Date.now();
        code = fs.readFileSync(i, "utf8");
        return options.build[type](i, code, function(data) {
          if (options.minify) {
            data = cleanCSS.process(data);
          }
          fs.writeFileSync(o, data);
          return console.log("[piping-styles]".bold.magenta, "Built in", Date.now() - start, "ms");
        });
      }
    };
    watcher.on("change", function(file) {
      if (!options.watch) {
        return;
      }
      console.log("[piping-styles]".bold.magenta, "File", path.relative(process.cwd(), file), "has changed, rebuilding");
      return build(main, out);
    });
    if (options.vendor && options.vendor.files.length && options.vendor.out && options.vendor.path) {
      files = [];
      _ref1 = options.vendor.files;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        file = _ref1[_i];
        files.push(path.resolve(basedir, options.vendor.path, file));
      }
      vendor = chokidar.watch(files, {
        ignored: options.ignore,
        ignoreInitial: true,
        persistent: true
      });
      vendorBuild = function(files, out) {
        var css, start, _j, _len1;

        start = Date.now();
        css = "";
        for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
          file = files[_j];
          css += fs.readFileSync(file, "utf8") + "\n";
        }
        if (options.minify) {
          css = cleanCSS.process(css);
        }
        fs.writeFileSync(path.resolve(basedir, out), css);
        return console.log("[piping-styles]".bold.magenta, "Vendor built in", Date.now() - start, "ms");
      };
      vendor.on("change", function(file) {
        if (!options.watch) {
          return;
        }
        console.log("[piping-styles]".bold.magenta, "File", path.relative(process.cwd(), file), "has changed, rebuilding vendor");
        return vendorBuild(files, options.vendor.out);
      });
      vendorBuild(files, options.vendor.out);
    }
    return build(main, out);
  };

}).call(this);
